"""
Ritum API - Backend FastAPI
SaaS jur√≠dico para advogados brasileiros
"""

import sys
import os
from pathlib import Path
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

# Importar configura√ß√µes
from app.core.config import settings

# Importar routers
from app.routers import (
    auth,
    users,
    clients,
    processes,
    kanban,
    ai,
    extrajudicial,
    documents,
)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Contexto de ciclo de vida da aplica√ß√£o.
    Executa valida√ß√µes no startup e cleanup no shutdown.
    """
    # === STARTUP ===
    print("üöÄ Iniciando Ritum API...")
    
    # Validar configura√ß√µes obrigat√≥rias
    try:
        settings.validate_required_settings()
        print("‚úÖ Configura√ß√µes validadas com sucesso")
    except ValueError as e:
        print(f"‚ùå ERRO DE CONFIGURA√á√ÉO:\n{e}")
        sys.exit(1)
    
    # Criar diret√≥rios necess√°rios
    static_dir = Path(__file__).parent / "static"
    static_dir.mkdir(exist_ok=True)
    (static_dir / "generated_documents").mkdir(exist_ok=True)
    print("‚úÖ Diret√≥rios criados")
    
    print(f"‚úÖ Ambiente: {settings.ENVIRONMENT}")
    print(f"‚úÖ CORS origins: {settings.CORS_ORIGINS}")
    print("‚úÖ Ritum API pronta!")
    
    yield  # Aplica√ß√£o roda aqui
    
    # === SHUTDOWN ===
    print("üëã Encerrando Ritum API...")


# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="Backend para o SaaS jur√≠dico Ritum",
    lifespan=lifespan,
)


# === MIDDLEWARE ===

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,  # ‚úÖ Lista restrita
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE"],
    allow_headers=["*"],
)


# === STATIC FILES ===

static_dir = Path(__file__).parent / "static"
app.mount("/static", StaticFiles(directory=static_dir), name="static")


# === ROUTERS ===

# Autentica√ß√£o (sem prefixo, endpoints na raiz)
app.include_router(auth.router)

# Usu√°rios
app.include_router(users.router)

# Clientes
app.include_router(clients.router)

# Processos
app.include_router(processes.router)

# Kanban
app.include_router(kanban.router)

# IA (Redator + Jurisprud√™ncia)
app.include_router(ai.router)

# Assistente Extrajudicial
app.include_router(extrajudicial.router)

# Gerador de Documentos
app.include_router(documents.router)


# === ENDPOINTS DE SA√öDE ===

@app.get("/", tags=["Health"])
def root():
    """
    Endpoint raiz - verifica se a API est√° online.
    """
    return {
        "status": "online",
        "app": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
    }


@app.get("/health", tags=["Health"])
def health_check():
    """
    Health check para monitoramento.
    """
    return {
        "status": "healthy",
        "environment": settings.ENVIRONMENT,
    }


# === EXECU√á√ÉO LOCAL ===

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
    )